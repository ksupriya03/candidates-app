{"version":3,"sources":["app/util/constants.js","app/selectors/index.js","app/containers/Dashboard/index.jsx","app/util/formatter.js","app/actions/candidate.js","app/containers/CandidateDetails/CandidateDetailsFormik.jsx","app/Routes.jsx","app/util/utils.js","app/util/dummyData.js","app/reducers/candidatesData.js","app/reducers/index.js","app/Store.js","app/App.jsx","reportWebVitals.js","index.jsx"],"names":["ROUTES","STATES","selectCandidates","state","candidates","getCandidateById","createSelector","_","id","candidatesData","find","data","CandidatesData","candidateList","useSelector","console","log","className","scope","map","candidate","idx","href","data-testid","name","email","jobId","formatAmount","input","formattedNumber","replace","Intl","NumberFormat","format","UPDATE_CANDIDATE_DATA","ADD_CANDIDATE_DATA","CandidateDetailsFormik","history","useHistory","useParams","dispatch","useDispatch","candidateDetails","gotoHome","push","initialValues","availableDate","currentlyEmployed","desiredSalary","currentSalary","onSubmit","values","type","payload","validate","errors","test","props","noValidate","htmlFor","disabled","class","placeholder","required","as","value","role","aria-labelledby","isValid","dirty","onClick","Routes","path","exact","component","generateRandomId","process","JEST_TESTS","Math","floor","random","SESSION_DATA_KEY","getData","window","sessionStorage","getItem","JSON","parse","persistData","setItem","stringify","action","updatedState","dataIdx","findIndex","splice","RootReducer","combineReducers","middelWare","thunkMiddleware","store","createStore","compose","applyMiddleware","createBrowserHistory","App","Store","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bbd1d948.chunk.js","sourcesContent":["export const ROUTES = {\n  candidateList: '/',\n  candidateDetails: '/details/:id',\n};\n\nexport const STATES = ['NSW', 'ACT', 'VIC', 'QLD', 'WA', 'NT', 'SA', 'TAS'];\n","import { createSelector } from 'reselect';\n\nexport const selectCandidates = (state) => state.candidates;\n\nexport const getCandidateById = createSelector(\n  selectCandidates,\n  (_, id) => id,\n  // eslint-disable-next-line eqeqeq\n  (candidatesData, id) => candidatesData.find((data) => data.id == id),\n);\n","import { useSelector } from 'react-redux';\n\nimport { selectCandidates } from '../../selectors';\n\nimport './candidate.scss';\n\nconst CandidatesData = () => {\n  const candidateList = useSelector(selectCandidates);\n\n  console.log('candidate list values ', candidateList);\n  return (\n    <div className=\"dashboard\">\n      <table className=\"table table-hover\">\n        <caption className=\"caption\">List of candidates</caption>\n        <thead className=\"table-header\">\n          <tr className=\"table-header table-heading\">\n            <th scope=\"col\" className=\"table-heading-space\">\n              #\n            </th>\n            <th scope=\"col\" className=\"table-heading-space\">\n              Candidate Name\n            </th>\n            <th scope=\"col\" className=\"table-heading-space\">\n              Email Id\n            </th>\n            <th scope=\"col\" className=\"table-heading-space\">\n              JobID\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"table-header\">\n          {candidateList &&\n            candidateList.map((candidate, idx) => (\n              <tr key={candidate.id} className=\"table-header-row\">\n                <td className=\"table-heading-space\">{idx + 1}</td>\n                <td className=\"table-heading-space\">\n                  <a href={`/details/${candidate.id}`} data-testid={candidate.name}>\n                    {candidate.name}\n                  </a>\n                </td>\n                <td className=\"table-heading-space\">{candidate.email}</td>\n                <td className=\"table-heading-space\">{candidate.jobId}</td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default CandidatesData;\n","export const formatAmount = (input) => {\n  if (!input) return '';\n\n  const formattedNumber = input.replace(/[^0-9.]/g, '');\n  if (!formattedNumber) return '';\n\n  // Convert to currency format\n  const convertedInput = new Intl.NumberFormat().format(formattedNumber);\n  return convertedInput;\n};\n","export const UPDATE_CANDIDATE_DATA = 'UPDATE_CANDIDATE_DATA';\nexport const ADD_CANDIDATE_DATA = 'ADD_CANDIDATE_DATA';\n\nexport function updateCandidateData(payload) {\n  return { type: 'UPDATE_CANDIDATE_DATA', payload };\n}\n\nexport function addCandidateData(payload) {\n  return { type: 'ADD_CANDIDATE_DATA', payload };\n}\n","import { Formik, Field, Form } from 'formik';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport { ROUTES, STATES } from '../../util/constants';\nimport { formatAmount } from '../../util/formatter';\nimport { getCandidateById } from '../../selectors';\nimport { updateCandidateData } from '../../actions/candidate';\n\nimport './candidate-details-page.scss';\n\nconst CandidateDetailsFormik = () => {\n  const history = useHistory();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const candidateDetails = useSelector((state) => getCandidateById(state, id));\n\n  const gotoHome = () => {\n    history.push(ROUTES.candidateList);\n  };\n\n  const updateData = (values) => {\n    dispatch(updateCandidateData({ ...candidateDetails, ...values }));\n    gotoHome();\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          jobId: candidateDetails.jobId,\n          name: candidateDetails.name,\n          email: candidateDetails.email,\n          availableDate: candidateDetails.availableDate,\n          state: candidateDetails.state,\n          currentlyEmployed: candidateDetails.currentlyEmployed,\n          desiredSalary: candidateDetails.desiredSalary,\n          currentSalary: candidateDetails.currentSalary,\n        }}\n        onSubmit={updateData}\n        validate={(values) => {\n          const errors = {};\n\n          if (!values.name) {\n            errors.name = 'Name is required';\n          }\n          if (!values.availableDate) {\n            errors.availableDate = 'Date is required';\n          }\n          if (!values.state) {\n            errors.state = 'State field is required';\n          }\n          if (!values.currentlyEmployed) {\n            errors.currentlyEmployed = 'Choose Employment Status';\n          }\n\n          if (!values.email) {\n            errors.email = 'Email is required.';\n          } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n            errors.email = 'Invalid email address';\n          }\n\n          return errors;\n        }}\n      >\n        {(props) => (\n          <div className=\"details-formik\">\n            <div className=\"page-header\">\n              <h1 className=\"personal-details-header\">Candidate details</h1>\n              <div className=\"personal-details-description\">The details of candidate</div>\n            </div>\n            <Form className=\"customer-layout\" noValidate>\n              <div>\n                <label htmlFor=\"jobId\">Job Id</label>\n                <div>\n                  <Field id=\"jobId\" name=\"jobId\" disabled className=\"form-control\" />\n                  {props.errors.jobId && (\n                    <div id=\"feedback-jobId\" class=\"invalid-feedback\">\n                      {props.errors.jobId}\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div>\n                <label htmlFor=\"name\">Candidate Name</label>\n                <div>\n                  <Field id=\"name\" name=\"name\" placeholder=\"Jane\" required className=\"form-control\" />\n                  {props.errors.name && (\n                    <div id=\"feedback-name\" class=\"invalid-feedback\">\n                      {props.errors.name}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"email\">Email</label>\n                <div>\n                  <Field id=\"email\" name=\"email\" placeholder=\"Doe@mail.com\" type=\"email\" required className=\"form-control\" />\n                  {props.errors.email && (\n                    <div id=\"feedback-email\" class=\"invalid-feedback\">\n                      {props.errors.email}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"availableDate\">Available after date</label>\n                <div>\n                  <Field id=\"availableDate\" name=\"availableDate\" placeholder=\"10-03-2020\" type=\"date\" required className=\"form-control\" />\n                  {props.errors.availableDate && (\n                    <div id=\"feedback-availableDate\" class=\"invalid-feedback\">\n                      {props.errors.availableDate}\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div>\n                <label htmlFor=\"state\">State</label>\n                <div>\n                  <Field as=\"select\" name=\"state\" required className=\"form-control\">\n                    <option value=\"\">Choose...</option>\n                    {STATES.map((state) => (\n                      <option key={state} value={state}>\n                        {state}\n                      </option>\n                    ))}\n                  </Field>\n                  {props.errors.state && (\n                    <div id=\"feedback-state\" class=\"invalid-feedback\">\n                      {props.errors.state}\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div>\n                <div id=\"my-radio-group\">Currently Employed</div>\n                <div role=\"group\" aria-labelledby=\"my-radio-group\">\n                  <label>\n                    <Field type=\"radio\" name=\"currentlyEmployed\" value=\"Y\" />\n                    Yes\n                  </label>\n                  <label>\n                    <Field type=\"radio\" name=\"currentlyEmployed\" value=\"N\" />\n                    No\n                  </label>\n                  {props.errors.currentlyEmployed && (\n                    <div id=\"feedback-currentlyEmployed\" class=\"invalid-feedback\">\n                      {props.errors.currentlyEmployed}\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div>\n                <label htmlFor=\"desiredSalary\">Desired salary</label>\n                <div>\n                  <Field id=\"desiredSalary\" name=\"desiredSalary\" value={formatAmount(props.values.desiredSalary)} className=\"form-control\" />\n                </div>\n              </div>\n              {props.values.currentlyEmployed === 'Y' ? (\n                <div>\n                  <label htmlFor=\"currentSalary\">Current salary</label>\n                  <div>\n                    <Field id=\"currentSalary\" name=\"currentSalary\" value={formatAmount(props.values.currentSalary)} className=\"form-control\" />\n                  </div>\n                </div>\n              ) : (\n                <div></div>\n              )}\n              <div>\n                <button type=\"submit\" disabled={!props.isValid || !props.dirty} className=\"btn btn-submit\">\n                  Submit\n                </button>\n                {props.dirty && props.isValid && <div className=\"ready-to-save\">Ready to save</div>}\n              </div>\n              <div>\n                <button type=\"button\" className=\"btn\" onClick={gotoHome}>\n                  Cancel\n                </button>\n              </div>\n            </Form>\n          </div>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default CandidateDetailsFormik;\n","import { Route, Switch } from 'react-router-dom';\n\nimport { ROUTES } from './util/constants';\nimport CandidatesData from './containers/Dashboard';\n// import CandidateDetails from './containers/CandidateDetails/CandidateDetails'\nimport CandidateDetailsFormik from './containers/CandidateDetails/CandidateDetailsFormik';\n\nconst Routes = () => (\n  <main>\n    <Switch>\n      <Route path={ROUTES.candidateList} exact component={CandidatesData} />\n      <Route path={ROUTES.candidateDetails} exact component={CandidateDetailsFormik} />\n    </Switch>\n  </main>\n);\n\nexport default Routes;\n","export const generateRandomId = () => (process.env.JEST_TESTS ? 'dummy-id' : Math.floor(Math.random() * 100000 * 4.5));\n","import { generateRandomId } from './utils';\n\nexport const getDummyData = () => [\n  {\n    id: generateRandomId(),\n    name: 'John',\n    email: 'John@gmail.com',\n    availableDate: '2021-03-05',\n    state: 'VIC',\n    currentlyEmployed: 'Y',\n    desiredSalary: '90000',\n    currentSalary: '70000',\n    jobId: 'flybuys2231',\n  },\n  {\n    id: generateRandomId(),\n    name: 'mary',\n    email: 'mary@mail.com',\n    availableDate: '2021-10-03',\n    state: 'VIC',\n    currentlyEmployed: 'Y',\n    desiredSalary: '90000',\n    currentSalary: '70000',\n    jobId: 'flybuys222',\n  },\n  {\n    id: generateRandomId(),\n    name: 'Jane',\n    email: 'jane@mail.com',\n    availableDate: '2021-04-14',\n    state: 'NSW',\n    currentlyEmployed: 'Y',\n    desiredSalary: '90000',\n    currentSalary: '70000',\n    jobId: 'flybuys123',\n  },\n  {\n    id: generateRandomId(),\n    name: 'Dave',\n    email: 'dave@mail.com',\n    availableDate: '2021-10-03',\n    state: 'VIC',\n    currentlyEmployed: 'N',\n    desiredSalary: '90000',\n    currentSalary: '70000',\n    jobId: 'flybuys222',\n  },\n];\n\nconst SESSION_DATA_KEY = 'DUMMY_SESSION_DATA';\nexport const getData = () => (window.sessionStorage.getItem(SESSION_DATA_KEY) && JSON.parse(window.sessionStorage.getItem(SESSION_DATA_KEY))) || getDummyData();\nexport const persistData = (data) => window.sessionStorage.setItem(SESSION_DATA_KEY, JSON.stringify(data));\n","/* eslint-disable no-case-declarations */\nimport { UPDATE_CANDIDATE_DATA, ADD_CANDIDATE_DATA } from '../actions/candidate';\nimport { getData, persistData } from '../util/dummyData';\nimport { generateRandomId } from '../util/utils';\n\nconst candidatesData = (state = getData(), action) => {\n  const updatedState = [...state];\n\n  switch (action.type) {\n    case UPDATE_CANDIDATE_DATA:\n      const dataIdx = state.findIndex((data) => data.id === action.payload.id);\n      updatedState.splice(dataIdx, 1, action.payload);\n      break;\n    case ADD_CANDIDATE_DATA:\n      updatedState.push({ ...action.payload, id: generateRandomId() });\n      break;\n    default:\n      break;\n  }\n\n  persistData(updatedState);\n  return updatedState;\n};\n\nexport default candidatesData;\n","import { combineReducers } from 'redux';\n// redux call\nimport candidates from './candidatesData';\n\nconst RootReducer = combineReducers({\n  candidates,\n});\n\nexport default RootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport RootReducer from './reducers';\n\nconst middelWare = [thunkMiddleware];\nconst store = createStore(RootReducer, compose(applyMiddleware(...middelWare)));\n\nexport default store;\n","import { Provider } from 'react-redux';\nimport { createBrowserHistory } from 'history';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport Routes from './Routes';\nimport Store from './Store';\n\nconst history = createBrowserHistory();\n\nconst App = () => {\n  return (\n    <Provider store={Store}>\n      <Router history={history} basename=\"/candidates-app\">\n        <Routes />\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}